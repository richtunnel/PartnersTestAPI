# azure-pipelines.yml - Azure DevOps Pipeline
trigger:
  branches:
    include:
    - main
    - develop
  paths:
    include:
    - src/*
    - package.json
    - Dockerfile
    - azure-pipelines.yml

variables:
  # Build configuration
  buildConfiguration: 'Release'
  vmImageName: 'ubuntu-latest'
  
  # Azure configuration
  azureSubscription: 'YourAzureServiceConnection'
  resourceGroupName: 'demographics-api-rg'
  location: 'eastus'
  
  # App Service configuration
  webAppName: 'demographics-api-prod'
  functionAppName: 'guardianship-functions-prod'
  
  # Database configuration
  sqlServerName: 'demographics-sql-server-prod'
  sqlDatabaseName: 'DemographicsDB'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: Build
    displayName: 'Build'
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'
    
    - script: |
        npm ci
        npm run build
        npm run test
      displayName: 'npm install, build, and test'
      env:
        NODE_ENV: test
    
    - task: ArchiveFiles@2
      displayName: 'Archive Express App files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-express.zip
        replaceExistingArchive: true
        verbose: true
    
    - task: ArchiveFiles@2
      displayName: 'Archive Function App files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-functions.zip
        replaceExistingArchive: true
        verbose: true
    
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-express.zip
      artifact: express-app
    
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-functions.zip
      artifact: function-app

- stage: Infrastructure
  displayName: 'Deploy Infrastructure'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployInfrastructure
    displayName: 'Deploy Azure Resources'
    pool:
      vmImage: $(vmImageName)
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          
          - task: AzureResourceManagerTemplateDeployment@3
            displayName: 'Deploy ARM Template'
            inputs:
              deploymentScope: 'Resource Group'
              azureResourceManagerConnection: '$(azureSubscription)'
              subscriptionId: '$(subscriptionId)'
              action: 'Create Or Update Resource Group'
              resourceGroupName: '$(resourceGroupName)'
              location: '$(location)'
              templateLocation: 'Linked artifact'
              csmFile: 'infrastructure/main.bicep'
              csmParametersFile: 'infrastructure/main.parameters.json'
              overrideParameters: |
                -webAppName $(webAppName) 
                -functionAppName $(functionAppName)
                -sqlServerName $(sqlServerName)
                -sqlDatabaseName $(sqlDatabaseName)
                -location $(location)

- stage: DeployApps
  displayName: 'Deploy Applications'
  dependsOn: Infrastructure
  condition: succeeded()
  jobs:
  - deployment: DeployExpressApp
    displayName: 'Deploy Express API'
    pool:
      vmImage: $(vmImageName)
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: express-app
          
          - task: AzureWebApp@1
            displayName: 'Deploy Express App to Azure Web App'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(webAppName)'
              runtimeStack: 'NODE|18-lts'
              package: '$(Pipeline.Workspace)/express-app/$(Build.BuildId)-express.zip'
              appSettings: |
                -NODE_ENV production
                -PORT 8000
                -DB_SERVER $(sqlServerName).database.windows.net
                -DB_DATABASE $(sqlDatabaseName)
                -DB_USER $(DB_USER)
                -DB_PASSWORD $(DB_PASSWORD)
                -AZURE_SERVICE_BUS_CONNECTION_STRING $(SERVICE_BUS_CONNECTION)
                -AZURE_STORAGE_CONNECTION_STRING $(STORAGE_CONNECTION)
                -REDIS_CONNECTION_STRING $(REDIS_CONNECTION)
                -API_KEY_ENCRYPTION_KEY $(API_ENCRYPTION_KEY)
  
  - deployment: DeployFunctionApp
    displayName: 'Deploy Azure Functions'
    pool:
      vmImage: $(vmImageName)
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: function-app
          
          - task: AzureFunctionApp@1
            displayName: 'Deploy Function App'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'functionAppLinux'
              appName: '$(functionAppName)'
              package: '$(Pipeline.Workspace)/function-app/$(Build.BuildId)-functions.zip'
              runtimeStack: 'NODE|18'
              appSettings: |
                -FUNCTIONS_WORKER_RUNTIME node
                -WEBSITE_NODE_DEFAULT_VERSION ~18
                -NODE_ENV production
                -DB_SERVER $(sqlServerName).database.windows.net
                -DB_DATABASE $(sqlDatabaseName)
                -DB_USER $(DB_USER)
                -DB_PASSWORD $(DB_PASSWORD)
                -AZURE_SERVICE_BUS_CONNECTION_STRING $(SERVICE_BUS_CONNECTION)
                -AZURE_STORAGE_CONNECTION_STRING $(STORAGE_CONNECTION)
                -QUEUE_NAME legal-documents-queue
                -BLOB_CONTAINER_NAME legal-documents

---

# infrastructure/main.bicep - Infrastructure as Code
@description('Web App name for the Express API')
param webAppName string

@description('Function App name for guardianship processing')
param functionAppName string

@description('SQL Server name')
param sqlServerName string

@description('SQL Database name')
param sqlDatabaseName string

@description('Location for all resources')
param location string = resourceGroup().location

@description('SKU for App Service Plan')
param appServicePlanSku string = 'B1'

@description('SQL Server administrator login')
@secure()
param sqlAdministratorLogin string

@description('SQL Server administrator password')
@secure()
param sqlAdministratorPassword string

// App Service Plan
resource appServicePlan 'Microsoft.Web/serverfarms@2022-03-01' = {
  name: '${webAppName}-plan'
  location: location
  sku: {
    name: appServicePlanSku
  }
  kind: 'linux'
  properties: {
    reserved: true
  }
}

// Express.js Web App
resource webApp 'Microsoft.Web/sites@2022-03-01' = {
  name: webAppName
  location: location
  properties: {
    serverFarmId: appServicePlan.id
    siteConfig: {
      linuxFxVersion: 'NODE|18-lts'
      alwaysOn: true
      appSettings: [
        {
          name: 'WEBSITES_ENABLE_APP_SERVICE_STORAGE'
          value: 'false'
        }
        {
          name: 'SCM_DO_BUILD_DURING_DEPLOYMENT'
          value: 'true'
        }
      ]
    }
    httpsOnly: true
  }
}

// Function App for guardianship processing
resource functionApp 'Microsoft.Web/sites@2022-03-01' = {
  name: functionAppName
  location: location
  kind: 'functionapp,linux'
  properties: {
    serverFarmId: appServicePlan.id
    siteConfig: {
      linuxFxVersion: 'NODE|18'
      appSettings: [
        {
          name: 'FUNCTIONS_EXTENSION_VERSION'
          value: '~4'
        }
        {
          name: 'FUNCTIONS_WORKER_RUNTIME'
          value: 'node'
        }
        {
          name: 'WEBSITE_NODE_DEFAULT_VERSION'
          value: '~18'
        }
        {
          name: 'AzureWebJobsStorage'
          value: storageAccount.properties.primaryEndpoints.blob
        }
      ]
    }
    httpsOnly: true
  }
}

// Storage Account
resource storageAccount 'Microsoft.Storage/storageAccounts@2022-09-01' = {
  name: '${replace(webAppName, '-', '')}storage'
  location: location
  sku: {
    name: 'Standard_LRS'
  }
  kind: 'StorageV2'
  properties: {
    accessTier: 'Hot'
  }
}

// Service Bus Namespace
resource serviceBusNamespace 'Microsoft.ServiceBus/namespaces@2022-10-01-preview' = {
  name: '${webAppName}-servicebus'
  location: location
  sku: {
    name: 'Standard'
    tier: 'Standard'
  }
}

// Service Bus Queue
resource serviceBusQueue 'Microsoft.ServiceBus/namespaces/queues@2022-10-01-preview' = {
  parent: serviceBusNamespace
  name: 'legal-documents-queue'
  properties: {
    maxDeliveryCount: 5
    defaultMessageTimeToLive: 'P14D'
    lockDuration: 'PT5M'
  }
}

// SQL Server
resource sqlServer 'Microsoft.Sql/servers@2022-05-01-preview' = {
  name: sqlServerName
  location: location
  properties: {
    administratorLogin: sqlAdministratorLogin
    administratorLoginPassword: sqlAdministratorPassword
    version: '12.0'
  }
}

// SQL Database
resource sqlDatabase 'Microsoft.Sql/servers/databases@2022-05-01-preview' = {
  parent: sqlServer
  name: sqlDatabaseName
  location: location
  sku: {
    name: 'S0'
    tier: 'Standard'
  }
  properties: {
    collation: 'SQL_Latin1_General_CP1_CI_AS'
  }
}

// SQL Server Firewall Rule for Azure services
resource sqlFirewallRule 'Microsoft.Sql/servers/firewallRules@2022-05-01-preview' = {
  parent: sqlServer
  name: 'AllowAzureServices'
  properties: {
    startIpAddress: '0.0.0.0'
    endIpAddress: '0.0.0.0'
  }
}

// Redis Cache
resource redisCache 'Microsoft.Cache/Redis@2022-06-01' = {
  name: '${webAppName}-redis'
  location: location
  properties: {
    sku: {
      name: 'Basic'
      family: 'C'
      capacity: 0
    }
    enableNonSslPort: false
  }
}

// Application Insights
resource appInsights 'Microsoft.Insights/components@2020-02-02' = {
  name: '${webAppName}-insights'
  location: location
  kind: 'web'
  properties: {
    Application_Type: 'web'
  }
}

// Outputs
output webAppName string = webApp.name
output webAppUrl string = 'https://${webApp.properties.defaultHostName}'
output functionAppName string = functionApp.name
output functionAppUrl string = 'https://${functionApp.properties.defaultHostName}'
output sqlServerName string = sqlServer.name
output storageAccountName string = storageAccount.name

---

# scripts/deploy-production.sh - Production deployment script
#!/bin/bash
set -e

echo "🚀 Starting Production Deployment for Demographics API"

# Configuration
RESOURCE_GROUP="demographics-api-rg"
LOCATION="eastus"
SUBSCRIPTION_ID="${AZURE_SUBSCRIPTION_ID:-$(az account show --query id -o tsv)}"
WEB_APP_NAME="demographics-api-prod"
FUNCTION_APP_NAME="guardianship-functions-prod"
SQL_SERVER_NAME="demographics-sql-server-prod"
SQL_DATABASE_NAME="DemographicsDB"

echo "📋 Configuration:"
echo "  Resource Group: $RESOURCE_GROUP"
echo "  Location: $LOCATION"
echo "  Subscription: $SUBSCRIPTION_ID"
echo "  Web App: $WEB_APP_NAME"
echo "  Function App: $FUNCTION_APP_NAME"

# Check if logged in to Azure
if ! az account show &> /dev/null; then
    echo "❌ Not logged in to Azure. Please run 'az login'"
    exit 1
fi

# Create resource group if it doesn't exist
echo "📦 Creating resource group..."
az group create \
    --name $RESOURCE_GROUP \
    --location $LOCATION \
    --subscription $SUBSCRIPTION_ID

# Deploy infrastructure using Bicep
echo "🏗️ Deploying infrastructure..."
az deployment group create \
    --resource-group $RESOURCE_GROUP \
    --template-file infrastructure/main.bicep \
    --parameters \
        webAppName=$WEB_APP_NAME \
        functionAppName=$FUNCTION_APP_NAME \
        sqlServerName=$SQL_SERVER_NAME \
        sqlDatabaseName=$SQL_DATABASE_NAME \
        location=$LOCATION \
        sqlAdministratorLogin=$SQL_ADMIN_USER \
        sqlAdministratorPassword=$SQL_ADMIN_PASSWORD

# Build applications
echo "🔨 Building applications..."
npm ci
npm run build

# Create deployment packages
echo "📦 Creating deployment packages..."
mkdir -p dist/express-app
mkdir -p dist/function-app

# Express app package
cp -r dist/ package.json node_modules/ dist/express-app/
cd dist/express-app
zip -r ../express-app.zip . -x "*.git*" "node_modules/.cache/*"
cd ../..

# Function app package  
cp -r src/functions/ dist/shared/ package.json host.json local.settings.json node_modules/ dist/function-app/
cd dist/function-app
zip -r ../function-app.zip . -x "*.git*" "node_modules/.cache/*"
cd ../..

# Deploy Express.js API
echo "🌐 Deploying Express API..."
az webapp deploy \
    --resource-group $RESOURCE_GROUP \
    --name $WEB_APP_NAME \
    --src-path dist/express-app.zip \
    --type zip

# Deploy Azure Functions
echo "⚡ Deploying Azure Functions..."
az functionapp deployment source config-zip \
    --resource-group $RESOURCE_GROUP \
    --name $FUNCTION_APP_NAME \
    --src dist/function-app.zip

# Configure application settings
echo "⚙️ Configuring application settings..."

# Get connection strings
STORAGE_CONNECTION=$(az storage account show-connection-string \
    --resource-group $RESOURCE_GROUP \
    --name "${WEB_APP_NAME//-/}storage" \
    --query connectionString -o tsv)

SERVICE_BUS_CONNECTION=$(az servicebus namespace authorization-rule keys list \
    --resource-group $RESOURCE_GROUP \
    --namespace-name "${WEB_APP_NAME}-servicebus" \
    --name RootManageSharedAccessKey \
    --query primaryConnectionString -o tsv)

REDIS_CONNECTION=$(az redis list-keys \
    --resource-group $RESOURCE_GROUP \
    --name "${WEB_APP_NAME}-redis" \
    --query primaryKey -o tsv)

# Configure Express app settings
az webapp config appsettings set \
    --resource-group $RESOURCE_GROUP \
    --name $WEB_APP_NAME \
    --settings \
        NODE_ENV=production \
        PORT=8000 \
        DB_SERVER="${SQL_SERVER_NAME}.database.windows.net" \
        DB_DATABASE=$SQL_DATABASE_NAME \
        DB_USER=$SQL_ADMIN_USER \
        DB_PASSWORD=$SQL_ADMIN_PASSWORD \
        AZURE_STORAGE_CONNECTION_STRING="$STORAGE_CONNECTION" \
        SERVICE_BUS_CONNECTION_STRING="$SERVICE_BUS_CONNECTION" \
        REDIS_CONNECTION_STRING="$REDIS_CONNECTION" \
        API_KEY_ENCRYPTION_KEY=$API_ENCRYPTION_KEY

# Configure Function app settings
az functionapp config appsettings set \
    --resource-group $RESOURCE_GROUP \
    --name $FUNCTION_APP_NAME \
    --settings \
        FUNCTIONS_WORKER_RUNTIME=node \
        WEBSITE_NODE_DEFAULT_VERSION=~18 \
        NODE_ENV=production \
        DB_SERVER="${SQL_SERVER_NAME}.database.windows.net" \
        DB_DATABASE=$SQL_DATABASE_NAME \
        DB_USER=$SQL_ADMIN_USER \
        DB_PASSWORD=$SQL_ADMIN_PASSWORD \
        AZURE_STORAGE_CONNECTION_STRING="$STORAGE_CONNECTION" \
        AZURE_SERVICE_BUS_CONNECTION_STRING="$SERVICE_BUS_CONNECTION" \
        QUEUE_NAME=legal-documents-queue \
        BLOB_CONTAINER_NAME=legal-documents

# Initialize database
echo "🗄️ Initializing database..."
npm run db:migrate

# Health check
echo "🏥 Performing health check..."
WEB_APP_URL="https://${WEB_APP_NAME}.azurewebsites.net"
FUNCTION_APP_URL="https://${FUNCTION_APP_NAME}.azurewebsites.net"

sleep 30 # Wait for apps to start

if curl -f "$WEB_APP_URL/api/v1/health" > /dev/null 2>&1; then
    echo "✅ Express API health check passed"
else
    echo "❌ Express API health check failed"
fi

if curl -f "$FUNCTION_APP_URL/api/health" > /dev/null 2>&1; then
    echo "✅ Function App health check passed"
else
    echo "❌ Function App health check failed"
fi

# Cleanup
rm -rf dist/

echo "🎉 Deployment completed successfully!"
echo "📊 Express API URL: $WEB_APP_URL"
echo "⚡ Function App URL: $FUNCTION_APP_URL"